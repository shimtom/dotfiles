#!/usr/bin/env python
from __future__ import absolute_import, division, print_function

import getpass
import os
import platform
import shlex
import shutil
import stat
import subprocess
import sys

DOTDIR = os.path.dirname(os.path.abspath(__file__))
COMPLETED = []


def _copy(src, dst):
    if os.path.isfile(dst):
        os.remove(dst)
    shutil.copy(src, dst)


def _symlink(src, dst, target_is_directory=False):
    if os.path.islink(dst):
        os.unlink(dst)
    elif (target_is_directory and os.path.isdir(dst)) or (
        not target_is_directory and os.path.isfile(dst)
    ):
        raise FileExistsError(f'{dst} already exists.')

    os.symlink(src, dst, target_is_directory)


def application(name):
    def wrap(func):
        def _setup(*args, **kwargs):
            if name in COMPLETED:
                return
            print(f"\033[0;34m===>\033[0;39m set up '{name}'")
            func(*args, **kwargs)
            COMPLETED.append(name)

        return _setup

    return wrap


def depend(*apps):
    def wrap(func):
        def _setup(*args, **kwargs):
            for app in apps:
                globals()[app](*args, **kwargs)
            func(*args, **kwargs)

        return _setup

    return wrap


@application('pkg')
def pkg(passwd):
    if platform.system() == 'Darwin':
        subprocess.check_call(
            shlex.split(
                '/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
            )
        )
        subprocess.check_call(shlex.split('brew tap caskroom/cask'))
        subprocess.check_call(shlex.split('brew update'))
        subprocess.check_call(shlex.split('brew upgrade'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(shlex.split('sudo -S apt update'), input=passwd)
        subprocess.check_call(shlex.split('sudo -S apt upgrade -y'), input=passwd)
        subprocess.check_call(shlex.split('sudo -S apt full-upgrade -y'), input=passwd)
        subprocess.check_call(shlex.split('sudo -S apt autoremove -y'), input=passwd)
        subprocess.check_call(shlex.split('sudo -S apt clean -y'), input=passwd)


@depend('pkg')
@application('git')
def git(passwd):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install git'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(shlex.split('sudo -S apt update'), input=passwd)
        subprocess.check_call(shlex.split('sudo -S apt install -y git'), input=passwd)

    _symlink(
        os.path.join(DOTDIR, 'git/gitignore_global'),
        os.path.expanduser('~/.gitignore_global'),
    )
    # .gitconfig will be edited.
    _copy(os.path.join(DOTDIR, 'git/gitconfig'), os.path.expanduser('~/.gitconfig'))


@depend('pkg')
@application('peco')
def peco(_):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install peoc'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(
            shlex.split(
                'wget -O - https://github.com/peco/peco/releases/download/v0.5.3/peco_linux_amd64.tar.gz | tar zxvf -'
            )
        )
        shutil.move('peco_linux_amd64/peco', '/usr/local/bin/')
        os.chmod('/usr/local/bin/peco', stat.S_IXOTH)
        shutil.rmtree('peco_linux_amd64')


@depend('pkg')
@application('imagemagick')
def imagemagick(passwd):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install imagemagick'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(shlex.split('sudo -S apt update'), input=passwd)
        subprocess.check_call(
            shlex.split('sudo -S apt install -y imagemagick'), input=passwd
        )


@depend('pkg')
@application('ffmpeg')
def ffmpeg(passwd):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install ffmpeg'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(shlex.split('sudo -S apt update'), input=passwd)
        subprocess.check_call(
            shlex.split('sudo -S apt install -y ffmpeg'), input=passwd
        )


@application('bash')
def bash(_):
    _symlink(os.path.join(DOTDIR, 'bash/bashrc'), os.path.expanduser('~/.bashrc'))
    _symlink(
        os.path.join(DOTDIR, 'bash/bash_profile'), os.path.expanduser('~/.bash_profile')
    )
    _symlink(
        os.path.join(DOTDIR, 'bash/bash_logout'), os.path.expanduser('~/.bash_logout')
    )


@depend('pkg', 'peco', 'anyenv')
@application('zsh')
def zsh(passwd):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install zsh'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(shlex.split('sudo -S apt update'), input=passwd)
        subprocess.check_call(
            shlex.split('sudo -S apt install -y zsh curl'), input=passwd
        )

    _symlink(os.path.join(DOTDIR, 'zsh/zlogin'), os.path.expanduser('~/.zlogin'))
    _symlink(os.path.join(DOTDIR, 'zsh/zlogout'), os.path.expanduser('~/.zlogout'))
    _symlink(os.path.join(DOTDIR, 'zsh/zprofile'), os.path.expanduser('~/.zprofile'))
    _symlink(os.path.join(DOTDIR, 'zsh/zshenv'), os.path.expanduser('~/.zshenv'))
    _symlink(os.path.join(DOTDIR, 'zsh/zshrc'), os.path.expanduser('~/.zshrc'))

    subprocess.check_call(
        shlex.split(
            'curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh'
        )
    )
    subprocess.check_call(
        shlex.split('zsh -c "source ~/.zplug/init.zsh && zplug check"')
    )
    subprocess.check_call(
        shlex.split('zsh -c "source ~/.zplug/init.zsh && zplug install"')
    )


@depend('pkg', 'peco', 'anyenv')
@application('fish')
def fish(passwd):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install fish'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(
            shlex.split('sudo -S apt install -y fish curl'), input=passwd
        )

    subprocess.check_call(
        shlex.split(
            f"curl https://git.io/fisher --create-dirs -sLo {os.path.expanduser('~/.config/fish/functions/fisher.fish')}"
        )
    )
    subprocess.check_call(shlex.split('fisher add jethrokuan/z'))
    subprocess.check_call(shlex.split('fisher add plugin-peco'))
    subprocess.check_call(shlex.split('fisher add oh-my-fish/theme-bobthefish'))
    _symlink(
        os.path.join(DOTDIR, 'fish/config.fish'),
        os.path.expanduser('~/.config/fish/config.fish'),
    )


@depend('pkg')
@application('tmux')
def tmux(passwd):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install reattach-to-user-namespace'))
        subprocess.check_call(shlex.split('brew install tmux'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(shlex.split('sudo -S apt install -y tmux'), input=passwd)

    _symlink(os.path.join(DOTDIR, 'tmux/tmux.conf'), os.path.expanduser('~/.tmux.conf'))


@depend('pkg', 'git')
@application('anyenv')
def anyenv(_):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install anyenv'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(
            shlex.split(
                f"git clone https://github.com/anyenv/anyenv {os.path.expanduser('~/.anyenv')}"
            )
        )
    if not os.path.isdir(os.path.expanduser('~/.anyenv/plugins')):
        os.makedirs(os.path.expanduser('~/.anyenv/plugins'))
    subprocess.check_call(
        shlex.split(
            f"git clone https://github.com/znz/anyenv-update.git {os.path.expanduser('~/.anyenv/plugins/anyenv-update')}"
        )
    )


@depend('anyenv')
@application('python')
def python(_):
    subprocess.check_call(shlex.split('anyenv install pyenv'))
    subprocess.check_call(shlex.split('pyenv install 3.6.8'))
    subprocess.check_call(shlex.split('pyenv global 3.6.8'))


@depend('pkg', 'python')
@application('vim')
def vim(passwd):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install neovim'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(shlex.split('sudo -S apt update'), input=passwd)
        subprocess.check_call(
            shlex.split('sudo -S apt install -y software-properties-common curl'),
            input=passwd,
        )
        subprocess.check_call(
            shlex.split('sudo -S add-apt-repository -y ppa:neovim-ppa/stable'),
            input=passwd,
        )
        subprocess.check_call(shlex.split('sudo -S apt update'), input=passwd)
        subprocess.check_call(
            shlex.split('sudo -S apt install -y neovim'), input=passwd
        )

    subprocess.check_call(shlex.split('pip3 install --upgrade neovim'))
    subprocess.check_call(
        shlex.split(
            'curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > /tmp/installer.sh'
        )
    )
    if not os.path.isdir(os.path.expanduser('~/.cache/dein')):
        os.makedirs(os.path.expanduser('~/.cache/dein'))
    subprocess.check_call(
        shlex.split(f"sh /tmp/installer.sh {os.path.expanduser('~/.cache/dein')}")
    )

    if not os.path.isdir(os.path.expanduser('~/.config/nvim/plugins')):
        os.makedirs(os.path.expanduser('~/.config/nvim/plugins'))
    _symlink(
        os.path.join(DOTDIR, 'nvim/init.vim'),
        os.path.expanduser('~/.config/nvim/init.vim'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/editor.vim'),
        os.path.expanduser('~/.config/nvim/editor.vim'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/core.vim'),
        os.path.expanduser('~/.config/nvim/core.vim'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/appearance.vim'),
        os.path.expanduser('~/.config/nvim/appearance.vim'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/plugins/dein.toml'),
        os.path.expanduser('~/.config/nvim/plugins/dein.toml'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/plugins/dein_lazy.toml'),
        os.path.expanduser('~/.config/nvim/plugins/dein_lazy.toml'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/plugins/dein_theme.toml'),
        os.path.expanduser('~/.config/nvim/plugins/dein_theme.toml'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/plugins/dein_python.toml'),
        os.path.expanduser('~/.config/nvim/plugins/dein_python.toml'),
    )


@depend('pkg')
@application('latex')
def latex(passwd):
    if platform.system() == 'Darwin':
        subprocess.check_call(shlex.split('brew install ghostscript'))
        subprocess.check_call(shlex.split('brew cask install basictex'))
        subprocess.check_call(shlex.split('sudo -S tlmgr paper a4'), input=passwd)
        subprocess.check_call(
            shlex.split('sudo -S tlmgr update --self --all'), input=passwd
        )
        subprocess.check_call(
            shlex.split(
                'sudo -S tlmgr install collection-langjapanese latexmk texdoc latexindent chktex cite siunitx'
            ),
            input=passwd,
        )
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.check_call(
            shlex.split('sudo -S apt install -y texlive-full'), input=passwd
        )
    _symlink(
        os.path.join(DOTDIR, 'latexmk/latexmkrc'), os.path.expanduser('~/.latexmkrc')
    )


@depend('python')
@application('powerline')
def powerline(passwd):
    subprocess.check_call(shlex.split('pip3 install powerline-status'))


def main():
    args = sys.argv[1:]
    choices = [
        'pkg',
        'peco',
        'imagemagick',
        'ffmpeg',
        'bash',
        'zsh',
        'fish',
        'tmux',
        'git',
        'anyenv',
        'python',
        'vim',
        'latex',
    ]

    # help
    if '-h' in args or '--help' in args:
        print(f"usage: setup [-h] [-a] {{{','.join(choices)}}}")
        print()
        print("positional arguments:")
        print(f"  {{{','.join(choices)}}}")
        print("                        select install app.")
        print()
        print("optional arguments:")
        print("  -h, --help            show this help message and exit")
        print("  -a, --all             install all available apps.")
        sys.exit(0)

    # error check
    if not args:
        print('setup: error: the following arguments are required', file=sys.stderr)
        sys.exit(1)
    elif '-a' not in args and '--all' not in args:
        _choices = [f"'{c}'" for c in choices]
        for arg in args:
            if arg not in choices:
                print(f"usage: setup [-h] {{{','.join(choices)}}}", file=sys.stderr)
                print(
                    f"setup: error: invalid choice: {arg} (choose from {', '.join(_choices)})",
                    file=sys.stderr,
                )
                sys.exit(1)

    # set up
    passwd = (getpass.getpass() + '\n').encode()

    if '-a' in args or '--all' in args:
        for c in choices:
            globals()[c](passwd)

    else:
        for a in args:
            globals()[a](passwd)


if __name__ == "__main__":
    main()
