#!/usr/bin/env python3
from __future__ import absolute_import, division, print_function

import getpass
import os
import platform
import shlex
import shutil
import stat
import subprocess
import sys

DOTDIR = os.path.dirname(os.path.abspath(__file__))
COMPLETED = []


def _copy(src, dst):
    if os.path.isfile(dst):
        os.remove(dst)
    shutil.copy(src, dst)


def _symlink(src, dst, target_is_directory=False):
    if os.path.islink(dst):
        os.unlink(dst)
    elif (target_is_directory and os.path.isdir(dst)) or (
        not target_is_directory and os.path.isfile(dst)
    ):
        raise FileExistsError('{dst} already exists.'.format(dst=dst))

    os.symlink(src, dst, target_is_directory)


def application(name):
    def wrap(func):
        def _setup(*args, **kwargs):
            if name in COMPLETED:
                return
            print("\033[0;34m===>\033[0;39m set up '{name}'".format(name=name))
            func(*args, **kwargs)
            COMPLETED.append(name)

        return _setup

    return wrap


def depend(*apps):
    def wrap(func):
        def _setup(*args, **kwargs):
            for app in apps:
                globals()[app](*args, **kwargs)
            func(*args, **kwargs)

        return _setup

    return wrap


@application('pkg')
def pkg(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(
            shlex.split(
                '/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
            ),
            check=True,
        )
        subprocess.run(shlex.split('brew tap caskroom/cask'), check=True)
        subprocess.run(shlex.split('brew update'), check=True)
        subprocess.run(shlex.split('brew upgrade'), check=True)
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run('sudo -S apt update', check=True, shell=True, input=passwd)
        subprocess.run('sudo -S apt upgrade -y', check=True, shell=True, input=passwd)
        subprocess.run(
            'sudo -S apt full-upgrade -y', check=True, shell=True, input=passwd
        )
        subprocess.run(
            'sudo -S apt autoremove -y', check=True, shell=True, input=passwd
        )
        subprocess.run('sudo -S apt clean -y', check=True, shell=True, input=passwd)


@depend('pkg')
@application('git')
def git(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(shlex.split('brew install git'), check=True)
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run('sudo -S apt update', check=True, shell=True, input=passwd)
        subprocess.run(
            'sudo -S apt install -y git', check=True, shell=True, input=passwd
        )

    _symlink(
        os.path.join(DOTDIR, 'git/gitignore_global'),
        os.path.expanduser('~/.gitignore_global'),
    )
    # .gitconfig will be edited.
    _copy(os.path.join(DOTDIR, 'git/gitconfig'), os.path.expanduser('~/.gitconfig'))


@depend('pkg')
@application('peco')
def peco(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(shlex.split('brew install peoc'), check=True)
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run(
            'wget -O - https://github.com/peco/peco/releases/download/v0.5.3/peco_linux_amd64.tar.gz | tar zxvf -',
            check=True,
            shell=True,
        )
        if os.path.exists('/usr/local/bin/peco'):
            subprocess.run(
                'sudo -S rm -f /usr/local/bin/peco',
                check=True,
                shell=True,
                input=passwd,
            )
        subprocess.run(
            'sudo -S mv peco_linux_amd64/peco /usr/local/bin/',
            check=True,
            shell=True,
            input=passwd,
        )
        subprocess.run(
            'sudo -S chmod +x /usr/local/bin/peco', check=True, shell=True, input=passwd
        )
        shutil.rmtree('peco_linux_amd64')


@depend('pkg')
@application('imagemagick')
def imagemagick(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(shlex.split('brew install imagemagick'), check=True)
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run('sudo -S apt update', check=True, shell=True, input=passwd)
        subprocess.run(
            'sudo -S apt install -y imagemagick', check=True, shell=True, input=passwd
        )


@depend('pkg')
@application('ffmpeg')
def ffmpeg(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(shlex.split('brew install ffmpeg'), check=True)
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run('sudo -S apt update', check=True, shell=True, input=passwd)
        subprocess.run(
            'sudo -S apt install -y ffmpeg', check=True, shell=True, input=passwd
        )


@application('bash')
def bash(_):
    _symlink(os.path.join(DOTDIR, 'bash/bashrc'), os.path.expanduser('~/.bashrc'))
    _symlink(
        os.path.join(DOTDIR, 'bash/bash_profile'), os.path.expanduser('~/.bash_profile')
    )
    _symlink(
        os.path.join(DOTDIR, 'bash/bash_logout'), os.path.expanduser('~/.bash_logout')
    )


@depend('pkg', 'peco', 'anyenv')
@application('zsh')
def zsh(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(shlex.split('brew install zsh'))
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run(shlex.split('sudo -S apt update'), check=True, input=passwd)
        subprocess.run(
            shlex.split('sudo -S apt install -y zsh curl'), check=True, input=passwd
        )

    _symlink(os.path.join(DOTDIR, 'zsh/zlogin'), os.path.expanduser('~/.zlogin'))
    _symlink(os.path.join(DOTDIR, 'zsh/zlogout'), os.path.expanduser('~/.zlogout'))
    _symlink(os.path.join(DOTDIR, 'zsh/zprofile'), os.path.expanduser('~/.zprofile'))
    _symlink(os.path.join(DOTDIR, 'zsh/zshenv'), os.path.expanduser('~/.zshenv'))
    _symlink(os.path.join(DOTDIR, 'zsh/zshrc'), os.path.expanduser('~/.zshrc'))

    subprocess.run(
        shlex.split(
            'curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh'
        ),
        check=True,
    )
    subprocess.run(
        shlex.split('zsh -c "source ~/.zplug/init.zsh && zplug check"'), check=True
    )
    subprocess.run(
        shlex.split('zsh -c "source ~/.zplug/init.zsh && zplug install"'), check=True
    )


@depend('pkg', 'peco', 'anyenv')
@application('fish')
def fish(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(shlex.split('brew install fish'), check=True)
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run('sudo -S apt install -y fish curl', check=True, shell=True, input=passwd
        )

    subprocess.run(
            'curl https://git.io/fisher --create-dirs -sLo {fisher_path}'.format(
                fisher_path=os.path.expanduser('~/.config/fish/functions/fisher.fish')
            ),
        check=True,
        shell=True,
    )
    subprocess.run("fish -c 'fisher add jethrokuan/z'", check=True, shell=True)
    subprocess.run("fish -c 'fisher add oh-my-fish/plugin-peco'", check=True, shell=True)
    subprocess.run("fish -c 'fisher add oh-my-fish/theme-bobthefish'", check=True, shell=True)
    _symlink(
        os.path.join(DOTDIR, 'fish/config.fish'),
        os.path.expanduser('~/.config/fish/config.fish'),
    )


@depend('pkg')
@application('tmux')
def tmux(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(
            shlex.split('brew install reattach-to-user-namespace'), check=True
        )
        subprocess.run(shlex.split('brew install tmux'), check=True)
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run(
            shlex.split('sudo -S apt install -y tmux'), check=True, input=passwd
        )

    _symlink(os.path.join(DOTDIR, 'tmux/tmux.conf'), os.path.expanduser('~/.tmux.conf'))


@depend('pkg', 'git')
@application('anyenv')
def anyenv(_):
    if platform.system() == 'Darwin':
        subprocess.run(shlex.split('brew install anyenv'), check=True)
    elif (
        platform.system() == 'Linux'
        and platform.dist()[0] == 'Ubuntu'
        and not os.path.exists(os.path.expanduser('~/.anyenv'))
    ):
        subprocess.run(
            'git clone https://github.com/anyenv/anyenv {path}'.format(
                path=os.path.expanduser('~/.anyenv')
            ),
            check=True,
            shell=True,
        )
    if not os.path.exists(os.path.expanduser('~/.anyenv/plugins')):
        os.makedirs(os.path.expanduser('~/.anyenv/plugins'))
        subprocess.run(
            'git clone https://github.com/znz/anyenv-update.git {path}'.format(
                path=os.path.expanduser('~/.anyenv/plugins/anyenv-update')
            ),
            check=True,
            shell=True,
        )

    subprocess.run('{anyenv} install --force-init'.format(anyenv=os.path.expanduser('~/.anyenv/bin/anyenv')), check=True, shell=True)
    # subprocess.run('eval "$({anyenv} init -)"'.format(anyenv=os.path.expanduser('~/.anyenv/bin/anyenv')), check=True, shell=True)

@depend('anyenv')
@application('python')
def python(_):
    subprocess.run('{anyenv} install pyenv'.format(anyenv=os.path.expanduser('~/.anyenv/bin/anyenv')), check=True, shell=True)
    subprocess.run('exec $SHELL -l', check=True, shell=True)
    subprocess.run('pyenv install 3.6.8', check=True, shell=True)
    subprocess.run('pyenv global 3.6.8', check=True, shell=True)


@depend('pkg', 'python')
@application('vim')
def vim(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(shlex.split('brew install neovim'), check=True)
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run(shlex.split('sudo -S apt update'), check=True, input=passwd)
        subprocess.run(
            shlex.split('sudo -S apt install -y software-properties-common curl'),
            check=True,
            input=passwd,
        )
        subprocess.run(
            shlex.split('sudo -S add-apt-repository -y ppa:neovim-ppa/stable'),
            check=True,
            input=passwd,
        )
        subprocess.run(shlex.split('sudo -S apt update'), check=True, input=passwd)
        subprocess.run(
            shlex.split('sudo -S apt install -y neovim'), check=True, input=passwd
        )

    subprocess.run(shlex.split('pip3 install --upgrade neovim'), check=True)
    subprocess.run(
        shlex.split(
            'curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > /tmp/installer.sh'
        ),
        check=True,
    )
    if not os.path.isdir(os.path.expanduser('~/.cache/dein')):
        os.makedirs(os.path.expanduser('~/.cache/dein'))
    subprocess.run(
        shlex.split(
            'sh /tmp/installer.sh {path}'.format(
                path=os.path.expanduser('~/.cache/dein')
            )
        ),
        check=True,
    )

    if not os.path.isdir(os.path.expanduser('~/.config/nvim/plugins')):
        os.makedirs(os.path.expanduser('~/.config/nvim/plugins'))
    _symlink(
        os.path.join(DOTDIR, 'nvim/init.vim'),
        os.path.expanduser('~/.config/nvim/init.vim'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/editor.vim'),
        os.path.expanduser('~/.config/nvim/editor.vim'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/core.vim'),
        os.path.expanduser('~/.config/nvim/core.vim'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/appearance.vim'),
        os.path.expanduser('~/.config/nvim/appearance.vim'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/plugins/dein.toml'),
        os.path.expanduser('~/.config/nvim/plugins/dein.toml'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/plugins/dein_lazy.toml'),
        os.path.expanduser('~/.config/nvim/plugins/dein_lazy.toml'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/plugins/dein_theme.toml'),
        os.path.expanduser('~/.config/nvim/plugins/dein_theme.toml'),
    )
    _symlink(
        os.path.join(DOTDIR, 'nvim/plugins/dein_python.toml'),
        os.path.expanduser('~/.config/nvim/plugins/dein_python.toml'),
    )


@depend('pkg')
@application('latex')
def latex(passwd):
    if platform.system() == 'Darwin':
        subprocess.run(shlex.split('brew install ghostscript'), check=True)
        subprocess.run(shlex.split('brew cask install basictex'), check=True)
        subprocess.run(shlex.split('sudo -S tlmgr paper a4'), check=True, input=passwd)
        subprocess.run(
            shlex.split('sudo -S tlmgr update --self --all'), check=True, input=passwd
        )
        subprocess.run(
            shlex.split(
                'sudo -S tlmgr install collection-langjapanese latexmk texdoc latexindent chktex cite siunitx'
            ),
            check=True,
            input=passwd,
        )
    elif platform.system() == 'Linux' and platform.dist()[0] == 'Ubuntu':
        subprocess.run(
            shlex.split('sudo -S apt install -y texlive-full'), check=True, input=passwd
        )
    _symlink(
        os.path.join(DOTDIR, 'latexmk/latexmkrc'), os.path.expanduser('~/.latexmkrc')
    )


@depend('python')
@application('powerline')
def powerline(passwd):
    subprocess.run(shlex.split('pip3 install powerline-status'), check=True)


def main():
    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument(
        '-a', '--all', action='store_true', help='install all available apps.'
    )
    choices = [
        'pkg',
        'peco',
        'imagemagick',
        'ffmpeg',
        'bash',
        'zsh',
        'fish',
        'tmux',
        'git',
        'anyenv',
        'python',
        'vim',
        'latex',
    ]
    parser.add_argument(
        'choices',
        nargs='*',
        default=[],
        help='select install app. choose from {choices}'.format(choices=choices),
    )
    args = parser.parse_args()

    if args.all:
        passwd = (getpass.getpass() + '\n').encode()
        for c in choices:
            globals()[c](passwd)

        sys.exit(0)

    if not len(args.choices):
        print(
            "setup: error: argument choise: invalid choice: '' (choose from {choices})".format(
                choices=choices
            )
        )
        sys.exit(1)
    for c in args.choices:
        if c not in choices:
            print(
                "setup: error: argument choise: invalid choice: '{choice}' (choose from {choices})".format(
                    choice=c, choices=choices
                )
            )
            sys.exit(1)

    passwd = (getpass.getpass() + '\n').encode()
    for c in args.choices:
        globals()[c](passwd)


if __name__ == "__main__":
    main()
