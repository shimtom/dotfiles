#
# A one-line, Powerline-inspired theme that displays contextual information.
#
# This theme requires a patched Powerline font, get them from
# https://github.com/Lokaltog/powerline-fonts.
#

# Load dependencies.
pmodload 'helper'

# Define variables.
_prompt_paradigm_current_bg='NONE'
_prompt_paradigm_segment_separator=''
_prompt_paradigm_start_time=$SECONDS

function prompt_paradigm_start_segment {
  local bg fg
  [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
  [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
  if [[ "$_prompt_paradigm_current_bg" != 'NONE' && "$1" != "$_prompt_paradigm_current_bg" ]]; then
    print -n "$bg%F{$_prompt_paradigm_current_bg}$fg "
  else
    print -n "$bg$fg"
  fi
  _prompt_paradigm_current_bg="$1"
  [[ -n "$3" ]] && print -n "$3"
}

function prompt_paradigm_end_segment {
  if [[ -n "$_prompt_paradigm_current_bg" ]]; then
    print -n " %k%F{$_prompt_paradigm_current_bg}$_prompt_paradigm_segment_separator"
  else
    print -n "%k"
  fi
  print -n "%f"
  _prompt_paradigm_current_bg=''
}

function prompt_paradigm_build_prompt {
  prompt_paradigm_start_segment black default '%(?::%F{red}✘ %F{black}%K{blue}$_prompt_paradigm_segment_separator)' \
                                             '%(!:%F{yellow}⚡ %F{black}%K{blue}$_prompt_paradigm_segment_separator:)' \
                                             '%(1j:%F{cyan}⚙ %F{black}%K{blue}$_prompt_paradigm_segment_separator:)%f'

  prompt_paradigm_start_segment blue black '$_prompt_paradigm_pwd'

  if [[ -n "$git_info" ]]; then
    prompt_paradigm_start_segment green black '${(e)git_info[ref]}${(e)git_info[status]}'
  fi

  if [[ -n "$python_info" ]]; then
    prompt_paradigm_start_segment white black '${(e)python_info[virtualenv]}'
  fi

  prompt_paradigm_end_segment
}

prompt_paradigm_print_elapsed_time() {
  local end_time=$(( SECONDS - _prompt_paradigm_start_time ))
  local hours minutes seconds remainder

  if (( end_time >= 3600 )); then
    hours=$(( end_time / 3600 ))
    remainder=$(( end_time % 3600 ))
    minutes=$(( remainder / 60 ))
    seconds=$(( remainder % 60 ))
    print -P "%B%F{red}>>> elapsed time ${hours}h${minutes}m${seconds}s%b"
  elif (( end_time >= 60 )); then
    minutes=$(( end_time / 60 ))
    seconds=$(( end_time % 60 ))
    print -P "%B%F{yellow}>>> elapsed time ${minutes}m${seconds}s%b"
  elif (( end_time > 10 )); then
    print -P "%B%F{green}>>> elapsed time ${end_time}s%b"
  fi
}

function prompt_paradigm_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_paradigm_pwd=$(prompt-pwd)

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # Get Python environment information.
  if (( $+functions[python-info] )); then
    python-info
  fi

  # Calculate and print the elapsed time.
  prompt_paradigm_print_elapsed_time
}

function prompt_paradigm_preexec {
  _prompt_paradigm_start_time="$SECONDS"
}

function prompt_paradigm_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_paradigm_preexec
  add-zsh-hook precmd prompt_paradigm_precmd

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ' ⁝ %s'
  zstyle ':prezto:module:git:info:added' format ' ✚'
  zstyle ':prezto:module:git:info:ahead' format ' ⬆'
  zstyle ':prezto:module:git:info:behind' format ' ⬇'
  zstyle ':prezto:module:git:info:branch' format ' %b'
  zstyle ':prezto:module:git:info:commit' format '➦ %.7c'
  zstyle ':prezto:module:git:info:deleted' format ' ✖'
  zstyle ':prezto:module:git:info:dirty' format ' ⁝'
  zstyle ':prezto:module:git:info:modified' format ' ✱'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format ' ➙'
  zstyle ':prezto:module:git:info:stashed' format ' S'
  zstyle ':prezto:module:git:info:unmerged' format ' ═'
  zstyle ':prezto:module:git:info:untracked' format ' ?'
  zstyle ':prezto:module:git:info:keys' format \
    'ref' '$(coalesce "%b" "%p" "%c")' \
    'status' '%s%D%A%B%S%a%d%m%r%U%u'

  # %v - virtualenv name.
  zstyle ':prezto:module:python:info:virtualenv' format 'virtualenv:%v'

  # Define prompts.
  PROMPT='${(e)$(prompt_paradigm_build_prompt)}${editor_info[keymap]} '
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_paradigm_setup "$@"
