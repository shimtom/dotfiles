# .bashrc

# Source global definitions
if [ -f /etc/bash.bashrc ]; then
    . /etc/bash.bashrc
fi


# User specific aliases and functions
if [ "$(uname)" == 'Darwin' ]; then
    OS_TYPE="mac"
elif [ "$(expr substr $(uname -s) 1 5)" == 'Linux' ]; then
    OS_TYPE='linux'
elif [ "$(expr substr $(uname -s) 1 10)" == 'MINGW32_NT' ]; then
    OS_TYPE="cygwin"
else
    OS_TYPE="unkown"
fi

if type "shopt" > /dev/null 2>&1; then
    if ! shopt -oq posix; then
        if [ -f /usr/share/bash-completion/bash_completion ]; then
            . /usr/share/bash-completion/bash_completion
        elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
        fi
    fi
fi


# Garbled
case $TERM in
    linux) export LANG=C ;;
    *)     export LANG=ja_JP.UTF-8 ;;
esac

## Locale
export LC_ALL=


## Golang
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin


## Neovim
export XDG_CONFIG_HOME="$HOME/.config"


## anyenv
if [ -d $HOME/.anyenv ] ; then
    export PATH="$HOME/.anyenv/bin:$PATH"
    eval "$(anyenv init -)"
    # tmux対応
    for D in `\ls $HOME/.anyenv/envs`
    do
        export PATH="$HOME/.anyenv/envs/$D/shims:$PATH"
    done
fi


## prompt
export PS1='\[\e[1;37m\]\w\[\e[00m\]$ '


## alias
case $OS_TYPE in
    mac) alias ls='ls -G' ;;
    linux) alias ls='ls --group-directories-first --color=always' ;;
esac


if type "pip" > /dev/null 2>&1; then
    alias pip-upgrade='pip freeze --local | grep -v "^\-e" | cut -d = -f 1 | xargs pip install -U'
fi


if type "pip3" > /dev/null 2>&1; then
    alias pip3-upgrade='pip3 freeze --local | grep -v "^\-e" | cut -d = -f 1 | xargs pip3 install -U'
fi


## brew
if type "brew" > /dev/null 2>&1; then
    brew-cask-upgrade(){ for app in $(brew cask list); do local latest="$(brew cask info "${app}" | awk 'NR==1{print $2}')"; local versions=($(ls -1 "/usr/local/Caskroom/${app}/.metadata/")); local current=$(echo ${versions} | awk '{print $NF}'); if [[ "${latest}" = "latest" ]]; then echo "[!] ${app}: ${current} == ${latest}"; [[ "$1" = "-f" ]] && brew cask install "${app}" --force; continue; elif [[ "${current}" = "${latest}" ]]; then continue; fi; echo "[+] ${app}: ${current} -> ${latest}"; brew cask uninstall "${app}" --force; brew cask install "${app}"; done; }
fi
